{"version":3,"sources":["re_com/alert.cljs"],"mappings":"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","names":["re-com.alert/alert-box-args-desc","re-com.validate/alert-type?","re-com.validate/alert-types-list","re-com.validate/string-or-hiccup?","cljs.core/string?","cljs.core/fn?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-com.alert/alert-box","p__54116","map__54117","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","js/Error","seq54111","self__4777__auto__","cljs.core/seq","id","alert-type","heading","body","padding","closeable?","on-close","class","style","attr","args","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","close-alert","re-com.close-button/close-button","alert-class","G__54122","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.box/flex-child-style","re-com.box/h-box","and__4174__auto__","cljs.core/not","re-com.alert/alert-list-args-desc","re-com.validate/vector-of-maps?","re-com.alert/alert-list","p__54139","map__54140","seq54136","alerts","max-height","border-style","alert-style","re-com.util/deref-or-value","re-com.box/box","re-com.box/border","re-com.box/scroller","re-com.box/v-box","iter__4582__auto__","s__54149","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__54151","cljs.core/chunk-buffer","i__54150","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__54148","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","alert","map__54154","map__54158","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.alert\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [re-com.util         :refer [deref-or-value]]\n            [re-com.buttons      :refer [button]]\n            [re-com.close-button :refer [close-button]]\n            [re-com.box          :refer [h-box v-box box scroller border flex-child-style]]\n            [re-com.validate     :refer [string-or-hiccup? alert-type? alert-types-list\n                                         vector-of-maps? css-style? html-attr?] :refer-macros [validate-args-macro]]))\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: alert\n;;--------------------------------------------------------------------------------------------------\n\n(def alert-box-args-desc\n  [{:name :id         :required false                 :type \"anything\"                                       :description [:span \"a unique identifier, usually an integer or string.\"]}\n   {:name :alert-type :required false :default :info  :type \"keyword\"         :validate-fn alert-type?       :description [:span \"one of \" alert-types-list]}\n   {:name :heading    :required false                 :type \"string | hiccup\" :validate-fn string-or-hiccup? :description [:span \"displayed as a larger heading. One of \" [:code \":heading\"] \" or \" [:code \":body\"] \" should be provided\"]}\n   {:name :body       :required false                 :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"displayed within the body of the alert\"}\n   {:name :padding    :required false :default \"15px\" :type \"string\"          :validate-fn string?           :description \"padding surounding the alert\"}\n   {:name :closeable? :required false :default false  :type \"boolean\"                                        :description [:span \"if true, render a close button. \" [:code \":on-close\"] \" should be supplied\"]}\n   {:name :on-close   :required false                 :type \":id -> nil\"      :validate-fn fn?               :description [:span \"called when the user clicks the close 'X' button. Passed the \" [:code \":id\"] \" of the alert to close\"]}\n   {:name :class      :required false                 :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated (applies to the outer container)\"}\n   {:name :style      :required false                 :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override (applies to the outer container)\"}\n   {:name :attr       :required false                 :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the outer container)\"]}])\n\n(defn alert-box\n  \"Displays one alert box. A close button allows the message to be removed\"\n  [& {:keys [id alert-type heading body padding closeable? on-close class style attr]\n      :or   {alert-type :info}\n      :as   args}]\n  {:pre [(validate-args-macro alert-box-args-desc args \"alert-box\")]}\n  (let [close-alert  [close-button\n                      :on-click  #(on-close id)\n                      :div-size  20\n                      :font-size 20]\n        alert-class  (alert-type {:none           \"\"\n                                  :info           \"alert-success\"\n                                  :warning        \"alert-warning\"\n                                  :danger         \"alert-danger\"})]\n    [:div\n     (merge {:class (str \"rc-alert alert fade in \" alert-class \" \" class)\n             :style (merge (flex-child-style \"none\")\n                           {:padding padding}\n                           style)}\n            attr)\n     (when heading\n       [h-box\n        :justify  :between\n        :align    :center\n        :style    {:margin-bottom (if body \"10px\" \"0px\")}\n        :children [[:h4\n                    {:style {:margin-bottom \"0px\"}} ;; Override h4\n                    heading]\n                   (when (and closeable? on-close)\n                     close-alert)]])\n     (when body\n       [h-box\n        :justify  :between\n        :align    :center\n        :children [[:div body]\n                   (when (and (not heading) closeable? on-close)\n                     close-alert)]])]))\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: alert-list\n;;--------------------------------------------------------------------------------------------------\n\n(def alert-list-args-desc\n  [{:name :alerts       :required true                                 :type \"vector of maps | atom\" :validate-fn vector-of-maps? :description \"alerts to render (in the order supplied). Can also be a list of maps\"}\n   {:name :on-close     :required true                                 :type \":id -> nil\"            :validate-fn fn?             :description [:span \"called when the user clicks the close 'X' button. Passed the alert's \" [:code \":id\"]]}\n   {:name :max-height   :required false                                :type \"string\"                :validate-fn string?         :description \"CSS style for maximum list height. By default, it grows forever\"}\n   {:name :padding      :required false :default \"4px\"                 :type \"string\"                :validate-fn string?         :description \"CSS padding within the alert\"}\n   {:name :border-style :required false :default \"1px solid lightgrey\" :type \"string\"                :validate-fn string?         :description \"CSS border style surrounding the list\"}\n   {:name :alert-class  :required false                                :type \"string\"                :validate-fn string?         :description \"CSS class names, space separated (applies to each alert-box component)\"}\n   {:name :alert-style  :required false                                :type \"CSS style map\"         :validate-fn css-style?      :description \"CSS styles (applies to each alert-box component)\"}\n   {:name :class        :required false                                :type \"string\"                :validate-fn string?         :description \"CSS class names, space separated (applies to the outer container)\"}\n   {:name :style        :required false                                :type \"CSS style map\"         :validate-fn css-style?      :description \"CSS styles to add or override (applies to the outer container)\"}\n   {:name :attr         :required false                                :type \"HTML attr map\"         :validate-fn html-attr?      :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the outer container)\"]}])\n\n(defn alert-list\n  \"Displays a list of alert-box components in a v-box. Sample alerts object:\n     [{:id 2\n       :alert-type :warning\n       :heading \\\"Heading\\\"\n       :body \\\"Body\\\"\n       :padding \\\"8px\\\"\n       :closeable? true}\n      {:id 1\n       :alert-type :info\n       :heading \\\"Heading\\\"\n       :body \\\"Body\\\"}]\"\n  [& {:keys [alerts on-close max-height padding border-style alert-class alert-style class style attr]\n      :or   {padding \"4px\"}\n      :as   args}]\n  {:pre [(validate-args-macro alert-list-args-desc args \"alert-list\")]}\n  (let [alerts (deref-or-value alerts)]\n    [box\n     :child [border\n             :class   (str \"rc-alert-list \" class)\n             :style   style\n             :attr    attr\n             :padding padding\n             :border  border-style\n             :child   [scroller\n                       :v-scroll :auto\n                       :style    {:max-height max-height}\n                       :child    [v-box\n                                  :size     \"auto\"\n                                  :children [(for [alert alerts]\n                                               (let [{:keys [id alert-type heading body padding closeable?]} alert]\n                                                 ^{:key id} [alert-box\n                                                             :id         id\n                                                             :alert-type alert-type\n                                                             :heading    heading\n                                                             :body       body\n                                                             :padding    padding\n                                                             :closeable? closeable?\n                                                             :on-close   on-close\n                                                             :class      alert-class\n                                                             :style      alert-style]))]]]]]))\n"]}