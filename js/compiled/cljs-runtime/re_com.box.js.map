{"version":3,"sources":["re_com/box.cljs"],"mappings":"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","names":["re-com.box/debug","re-com.box/flex-child-style","size","vec__53747","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","split-size","clojure.string.split.cljs$core$IFn$_invoke$arity$2","clojure.string/trim","split-count","cljs.core/count","_","js/Error","cljs.core/contains?","size-only","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","split-size-only","num","units","pass-through?","grow-ratio?","grow","shrink","basis","flex","and__4174__auto__","re-com.box/flex-flow-style","flex-flow","re-com.box/justify-style","justify","js","G__53754","cljs.core/Keyword","re-com.box/align-style","attribute","align","attribute-wk","cljs.core/name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","as","G__53755","re-com.box/scroll-style","scroll","G__53759","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-com.box/box-base","p__53762","map__53763","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq53761","self__4777__auto__","cljs.core/seq","h-scroll","v-scroll","width","height","min-width","min-height","max-width","max-height","align-self","margin","padding","border","l-border","r-border","t-border","b-border","radius","bk-color","child","class-name","class","style","attr","s","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.box/gap-args-desc","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","re-com.box/gap","p__53770","map__53771","seq53768","args","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","re-com.box/line-args-desc","re-com.box/line","p__53783","map__53785","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq53777","color","re-com.box/h-box-args-desc","cljs.core/sequential?","re-com.validate/justify-style?","re-com.validate/justify-options-list","re-com.validate/align-style?","re-com.validate/align-options-list","re-com.box/h-box","p__53795","map__53796","seq53794","gap","children","gap-form","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-com.box/v-box-args-desc","re-com.box/v-box","p__53799","map__53800","seq53798","re-com.box/box-args-desc","re-com.validate/string-or-hiccup?","re-com.box/box","p__53803","map__53804","seq53802","re_com.box.box_base.cljs$core$IFn$_invoke$arity$variadic","re-com.box/scroller-args-desc","re-com.validate/scroll-style?","re-com.box/scroller","p__53812","map__53813","seq53806","not-v-or-h","re-com.box/border-args-desc","re-com.box/border","p__53823","map__53824","seq53822","no-border","cljs.core/every?","cljs.core/nil?","default-border"],"sourcesContent":["(ns re-com.box\n  (:require [clojure.string  :as    string]\n            [re-com.validate :refer [justify-style? justify-options-list align-style? align-options-list scroll-style?\n                                     scroll-options-list string-or-hiccup? css-style? html-attr?] :refer-macros [validate-args-macro]]))\n\n(def debug false)\n\n\n;; ------------------------------------------------------------------------------------\n;;  Private Helper functions\n;; ------------------------------------------------------------------------------------\n\n(defn flex-child-style\n  \"Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\\\d+)(px|%|em)|(\\\\d+)\\\\w(\\\\d+)\\\\w(.*) - remove double backslashes\"\n  [size]\n  ;; TODO: Could make initial/auto/none into keywords???\n  (let [split-size      (string/split (string/trim size) #\"\\s+\")                  ;; Split into words separated by whitespace\n        split-count     (count split-size)\n        _               (assert (contains? #{1 3} split-count) \"Must pass either 1 or 3 words to flex-child-style\")\n        size-only       (when (= split-count 1) (first split-size))         ;; Contains value when only one word passed (e.g. auto, 60px)\n        split-size-only (when size-only (string/split size-only #\"(\\d+)(.*)\")) ;; Split into number + string\n        [_ num units]   (when size-only split-size-only)                    ;; grab number and units\n        pass-through?   (nil? num)                                          ;; If we can't split, then we'll pass this straign through\n        grow-ratio?     (or (= units \"%\") (= units \"\") (nil? units))        ;; Determine case for using grow ratio\n        grow            (if grow-ratio? num \"0\")                            ;; Set grow based on percent or integer, otherwise no grow\n        shrink          (if grow-ratio? \"1\" \"0\")                            ;; If grow set, then set shrink to even shrinkage as well\n        basis           (if grow-ratio? \"0px\" size)                         ;; If grow set, then even growing, otherwise set basis size to the passed in size (e.g. 100px, 5em)\n        flex            (if (and size-only (not pass-through?))\n                          (str grow \" \" shrink \" \" basis)\n                          size)]\n    {:-webkit-flex flex\n             :flex flex}))\n\n\n(defn flex-flow-style\n  \"A cross-browser helper function to output flex-flow with all it's potential browser prefixes\"\n  [flex-flow]\n  {:-webkit-flex-flow flex-flow\n           :flex-flow flex-flow})\n\n(defn justify-style\n  \"Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property\"\n  [justify]\n  (let [js (case justify\n             :start   \"flex-start\"\n             :end     \"flex-end\"\n             :center  \"center\"\n             :between \"space-between\"\n             :around  \"space-around\")]\n    {:-webkit-justify-content js\n             :justify-content js}))\n\n\n(defn align-style\n  \"Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property\"\n  [attribute align]\n  (let [attribute-wk (->> attribute name (str \"-webkit-\") keyword)\n        as           (case align\n                       :start    \"flex-start\"\n                       :end      \"flex-end\"\n                       :center   \"center\"\n                       :baseline \"baseline\"\n                       :stretch  \"stretch\")]\n    {attribute-wk as\n     attribute    as}))\n\n\n(defn scroll-style\n  \"Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value\"\n  [attribute scroll]\n  {attribute (case scroll\n                  :auto  \"auto\"\n                  :off   \"hidden\"\n                  :on    \"scroll\"\n                  :spill \"visible\")})\n\n\n;; ------------------------------------------------------------------------------------\n;;  Private Component: box-base (debug color: lightblue)\n;; ------------------------------------------------------------------------------------\n\n(defn- box-base\n  \"This should generally NOT be used as it is the basis for the box, scroller and border components\"\n  [& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self\n             margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]}]\n  (let [s (merge\n            (flex-flow-style \"inherit\")\n            (flex-child-style size)\n            (when scroll      (scroll-style   :overflow scroll))\n            (when h-scroll    (scroll-style   :overflow-x h-scroll))\n            (when v-scroll    (scroll-style   :overflow-y v-scroll))\n            (when width       {:width         width})\n            (when height      {:height        height})\n            (when min-width   {:min-width     min-width})\n            (when min-height  {:min-height    min-height})\n            (when max-width   {:max-width     max-width})\n            (when max-height  {:max-height    max-height})\n            (when justify     (justify-style  justify))\n            (when align       (align-style    :align-items align))\n            (when align-self  (align-style    :align-self align-self))\n            (when margin      {:margin        margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\n            (when padding     {:padding       padding})\n            (when border      {:border        border})\n            (when l-border    {:border-left   l-border})\n            (when r-border    {:border-right  r-border})\n            (when t-border    {:border-top    t-border})\n            (when b-border    {:border-bottom b-border})\n            (when radius      {:border-radius radius})\n            (if bk-color\n              {:background-color bk-color}\n              (if debug {:background-color \"lightblue\"} {}))\n            style)]\n    [:div\n     (merge\n       {:class (str class-name \"display-flex \" class) :style s}\n       attr)\n     child]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: gap (debug color: chocolate)\n;; ------------------------------------------------------------------------------------\n\n(def gap-args-desc\n  [{:name :size   :required true  :type \"string\"        :validate-fn string?    :description \"the length of the whitespace.  Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\n   {:name :width  :required false :type \"string\"        :validate-fn string?    :description \"a CSS width style\"}\n   {:name :height :required false :type \"string\"        :validate-fn string?    :description \"a CSS height style\"}\n   {:name :class  :required false :type \"string\"        :validate-fn string?    :description \"CSS class names, space separated\"}\n   {:name :style  :required false :type \"CSS style map\" :validate-fn css-style? :description \"CSS styles to add or override\"}\n   {:name :attr   :required false :type \"HTML attr map\" :validate-fn html-attr? :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn gap\n  \"Returns a component which produces a gap between children in a v-box/h-box along the main axis\"\n  [& {:keys [size width height class style attr]\n      :as   args}]\n  {:pre [(validate-args-macro gap-args-desc args \"gap\")]}\n  (let [s (merge\n            (when size   (flex-child-style size))\n            (when width  {:width width})\n            (when height {:height height})\n            (when debug  {:background-color \"chocolate\"})\n            style)]\n    [:div\n     (merge\n       {:class (str \"rc-gap \" class) :style s}\n       attr)]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: line\n;; ------------------------------------------------------------------------------------\n\n(def line-args-desc\n  [{:name :size  :required false :default \"1px\"       :type \"string\"        :validate-fn string?    :description \"a CSS style for the thickness of the line. Usually px, % or em\"}\n   {:name :color :required false :default \"lightgray\" :type \"string\"        :validate-fn string?    :description \"a CSS color\"}\n   {:name :class :required false                      :type \"string\"        :validate-fn string?    :description \"CSS class names, space separated\"}\n   {:name :style :required false                      :type \"CSS style map\" :validate-fn css-style? :description \"CSS styles to add or override\"}\n   {:name :attr  :required false                      :type \"HTML attr map\" :validate-fn html-attr? :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn line\n  \"Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line\"\n  [& {:keys [size color class style attr]\n      :or   {size \"1px\" color \"lightgray\"}\n      :as   args}]\n  {:pre [(validate-args-macro line-args-desc args \"line\")]}\n  (let [s (merge\n            (flex-child-style (str \"0 0 \" size))\n            {:background-color color}\n            style)]\n    [:div\n     (merge\n       {:class (str \"rc-line \" class) :style s}\n       attr)]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: h-box (debug color: gold)\n;; ------------------------------------------------------------------------------------\n\n(def h-box-args-desc\n  [{:name :children   :required true                    :type \"vector\"        :validate-fn sequential?    :description \"a vector (or list) of components\"}\n   {:name :size       :required false :default \"none\"   :type \"string\"        :validate-fn string?        :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width      :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style\"}\n   {:name :height     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style\"}\n   {:name :min-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :justify    :required false :default :start   :type \"keyword\"       :validate-fn justify-style? :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\n   {:name :align      :required false :default :stretch :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\n   {:name :align-self :required false                   :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\n   {:name :margin     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS margin style\"}\n   {:name :padding    :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS padding style\"}\n   {:name :gap        :required false                   :type \"string\"        :validate-fn string?        :description \"the amount of whitespace to put between each child. Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\n   {:name :class      :required false                   :type \"string\"        :validate-fn string?        :description \"CSS class names, space separated\"}\n   {:name :style      :required false                   :type \"CSS style map\" :validate-fn css-style?     :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                   :type \"HTML attr map\" :validate-fn html-attr?     :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn h-box\n  \"Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent\"\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr]\n      :or   {size \"none\" justify :start align :stretch}\n      :as   args}]\n  {:pre [(validate-args-macro h-box-args-desc args \"h-box\")]}\n  (let [s        (merge\n                   (flex-flow-style \"row nowrap\")\n                   (flex-child-style size)\n                   (when width      {:width      width})\n                   (when height     {:height     height})\n                   (when min-width  {:min-width  min-width})\n                   (when min-height {:min-height min-height})\n                   (when max-width  {:max-width  max-width})\n                   (when max-height {:max-height max-height})\n                   (justify-style justify)\n                   (align-style :align-items align)\n                   (when align-self (align-style :align-self align-self))\n                   (when margin     {:margin     margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\n                   (when padding    {:padding    padding})\n                   (when debug      {:background-color \"gold\"})\n                   style)\n        gap-form (when gap [re-com.box/gap\n                            :size  gap\n                            :width gap]) ;; TODO: required to get around a Chrome bug: https://code.google.com/p/chromium/issues/detail?id=423112. Remove once fixed.\n        children (if gap\n                   (interpose gap-form (filter identity children)) ;; filter is to remove possible nils so we don't add unwanted gaps\n                   children)]\n    (into [:div\n           (merge\n             {:class (str \"rc-h-box display-flex \" class) :style s}\n             attr)]\n          children)))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: v-box (debug color: antiquewhite)\n;; ------------------------------------------------------------------------------------\n\n(def v-box-args-desc\n  [{:name :children   :required true                    :type \"vector\"        :validate-fn sequential?    :description \"a vector (or list) of components\"}\n   {:name :size       :required false :default \"none\"   :type \"string\"        :validate-fn string?        :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width      :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style\"}\n   {:name :height     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style\"}\n   {:name :min-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :justify    :required false :default :start   :type \"keyword\"       :validate-fn justify-style? :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\n   {:name :align      :required false :default :stretch :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\n   {:name :align-self :required false                   :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\n   {:name :margin     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS margin style\"}\n   {:name :padding    :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS padding style\"}\n   {:name :gap        :required false                   :type \"string\"        :validate-fn string?        :description \"the amount of whitespace to put between each child. Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\n   {:name :class      :required false                   :type \"string\"        :validate-fn string?        :description \"CSS class names, space separated\"}\n   {:name :style      :required false                   :type \"CSS style map\" :validate-fn css-style?     :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                   :type \"HTML attr map\" :validate-fn html-attr?     :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn v-box\n  \"Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent\"\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr]\n      :or   {size \"none\" justify :start align :stretch}\n      :as   args}]\n  {:pre [(validate-args-macro v-box-args-desc args \"v-box\")]}\n  (let [s        (merge\n                   (flex-flow-style  \"column nowrap\")\n                   (flex-child-style size)\n                   (when width       {:width      width})\n                   (when height      {:height     height})\n                   (when min-width   {:min-width  min-width})\n                   (when min-height  {:min-height min-height})\n                   (when max-width   {:max-width  max-width})\n                   (when max-height  {:max-height max-height})\n                   (justify-style    justify)\n                   (align-style      :align-items align)\n                   (when align-self  (align-style :align-self align-self))\n                   (when margin      {:margin     margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\n                   (when padding     {:padding    padding})\n                   (when debug       {:background-color \"antiquewhite\"})\n                   style)\n        gap-form (when gap [re-com.box/gap\n                            :size   gap\n                            :height gap]) ;; TODO: required to get around a Chrome bug: https://code.google.com/p/chromium/issues/detail?id=423112. Remove once fixed.\n        children (if gap\n                   (interpose gap-form (filter identity children)) ;; filter is to remove possible nils so we don't add unwanted gaps\n                   children)]\n    (into [:div\n           (merge\n             {:class (str \"rc-v-box display-flex \" class) :style s}\n             attr)]\n          children)))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: box\n;; ------------------------------------------------------------------------------------\n\n(def box-args-desc\n  [{:name :child      :required true                    :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\n   {:name :size       :required false :default \"none\"   :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width      :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style\"}\n   {:name :height     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style\"}\n   {:name :min-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                   :type \"string\"          :validate-fn string?          :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                   :type \"string\"          :validate-fn string?          :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :justify    :required false :default :start   :type \"keyword\"         :validate-fn justify-style?    :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\n   {:name :align      :required false :default :stretch :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\n   {:name :align-self :required false                   :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\n   {:name :margin     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\n   {:name :padding    :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\n   {:name :class      :required false                   :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\n   {:name :style      :required false                   :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                   :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn box\n  \"Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box\"\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr]\n      :or   {size \"none\"}\n      :as   args}]\n  {:pre [(validate-args-macro box-args-desc args \"box\")]}\n  (box-base :size        size\n            :width       width\n            :height      height\n            :min-width   min-width\n            :min-height  min-height\n            :max-width   max-width\n            :max-height  max-height\n            :justify     justify\n            :align       align\n            :align-self  align-self\n            :margin      margin\n            :padding     padding\n            :child       child\n            :class-name  \"rc-box \"\n            :class       class\n            :style       style\n            :attr        attr))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: scroller\n;; ------------------------------------------------------------------------------------\n\n(def scroller-args-desc\n  [{:name :child      :required true                    :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\n   {:name :size       :required false :default \"auto\"   :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :scroll     :required false :default \"auto\"   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"Sets both h-scroll and v-scroll at once: \" [:br]\n                                                                                                                             [:code \":auto\"] \": only show scroll bar(s) if the content is larger than the scroller\" [:br]\n                                                                                                                             [:code \":on\"] \": always show scroll bars\" [:br]\n                                                                                                                             [:code \":off\"] \": never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen\" [:br]\n                                                                                                                             [:code \":spill\"] \": never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place\"]}\n   {:name :h-scroll   :required false                   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"see \" [:code \":scroll\"] \". Overrides that setting\"]}\n   {:name :v-scroll   :required false                   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"see \" [:code \":scroll\"] \". Overrides that setting\"]}\n   {:name :width      :required false                   :type \"string\"          :validate-fn string?           :description \"initial width\"}\n   {:name :height     :required false                   :type \"string\"          :validate-fn string?           :description \"initial height\"}\n   {:name :min-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :justify    :required false :default :start   :type \"keyword\"         :validate-fn justify-style?    :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\n   {:name :align      :required false :default :stretch :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\n   {:name :align-self :required false                   :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\n   {:name :margin     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\n   {:name :padding    :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\n   {:name :class      :required false                   :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\n   {:name :style      :required false                   :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                   :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn scroller\n  \"Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value\"\n  [& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr]\n      :or   {size \"auto\"}\n      :as   args}]\n  {:pre [(validate-args-macro scroller-args-desc args \"scroller\")]}\n  (let [not-v-or-h (and (nil? v-scroll) (nil? h-scroll))\n        scroll     (if (and (nil? scroll) not-v-or-h) :auto scroll)]\n    (box-base :size       size\n              :scroll     scroll\n              :h-scroll   h-scroll\n              :v-scroll   v-scroll\n              :width      width\n              :height     height\n              :min-width  min-width\n              :min-height min-height\n              :max-width  max-width\n              :max-height max-height\n              :justify    justify\n              :align      align\n              :align-self align-self\n              :margin     margin\n              :padding    padding\n              :child      child\n              :class-name \"rc-scroller \"\n              :class      class\n              :style      style\n              :attr       attr)))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: border\n;; ------------------------------------------------------------------------------------\n\n(def border-args-desc\n  [{:name :child      :required true                                 :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\n   {:name :border     :required false :default \"1px solid lightgrey\" :type \"string\"          :validate-fn string?           :description \"a CSS border style. A convenience to describe all borders in one parameter\"}\n   {:name :l-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the left border. Overrides \" [:code \":border\"]]}\n   {:name :r-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the right border. Overrides \" [:code \":border\"]]}\n   {:name :t-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the top border. Overrides \" [:code \":border\"]]}\n   {:name :b-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the bottom. Overrides \" [:code \":border\"]]}\n   {:name :radius     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS radius style eg.\\\"2px\\\"\"}\n   {:name :size       :required false :default \"none\"                :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width      :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS style describing the initial width\"}\n   {:name :height     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS style describing the initial height\"}\n   {:name :min-width  :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :margin     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\n   {:name :padding    :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\n   {:name :class      :required false                                :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\n   {:name :style      :required false                                :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                                :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn border\n  \"Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)\"\n  [& {:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr]\n      :or   {size \"none\"}\n      :as   args}]\n  {:pre [(validate-args-macro border-args-desc args \"border\")]}\n  (let [no-border      (every? nil? [border l-border r-border t-border b-border])\n        default-border \"1px solid lightgrey\"]\n    (box-base :size        size\n              :width       width\n              :height      height\n              :min-width   min-width\n              :min-height  min-height\n              :max-width   max-width\n              :max-height  max-height\n              :margin      margin\n              :padding     padding\n              :border      (if no-border default-border border)\n              :l-border    l-border\n              :r-border    r-border\n              :t-border    t-border\n              :b-border    b-border\n              :radius      radius\n              :child       child\n              :class-name  \"rc-border \"\n              :class       class\n              :style       style\n              :attr        attr)))"]}