{"version":3,"sources":["todo_fechapter/events.cljs"],"mappings":";;;;;AAMA,AAAA,AAACA,AAEA,AAAKC,AAAEA;AAAP,AACEC;;AAEH,AAAA,AAACF,AAEA,AAAAG,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASH;AAAT,AAAAI,AAAAD,AAAA,AAAA,AAAWG;AAAX,AACE,AAAA,AAACC,AAAMF,AAAiBC;;AAE3B,AAAA,AAACP,AAEA,AAAAS,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAAJ,AAAAK,AAAA,AAAA,AAAST;AAAT,AAAAI,AAAAK,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACH,AAAMF,AAAoBK;;AAE9B,AAAA,AAACX,AAEA,AAAAY,AAAKN;AAAL,AAAA,AAAAO,AAAAD;AAAA,AAAAP,AAAAQ,AAAA,AAAA,AAASZ;AAATa,AAAA,AAAAT,AAAAQ,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAmBK;AAAnB,AAAAD,AAAAJ,AAAA,AAAsBM;AAAtB,AACE,AAAA,AAACZ,AAAMF,AAEA,AAACe,AAAI,AAACC,AACA,AAAKC;AAAL,AACE,AAAI,AAACC,AAAE,AAAA,AAAKL,AACL,AAAA,AAAK,AAAA,AAAKI;AACf,AAAA,AAACf,AAAMe,AAAgBH;;AACvBG;;AACJ,AAAA,AAAQjB;;AAExB,AAAA,AAACN,AAEA,AAAAyB,AAAKnB;AAAL,AAAA,AAAAoB,AAAAD;AAAA,AAAApB,AAAAqB,AAAA,AAAA,AAASzB;AAAT0B,AAAA,AAAAtB,AAAAqB,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAZ,AAAA,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAAX,AAAAC,AAAAU,AAAAA;AAAA,AAAAT,AAAAS,AAAA,AAAmBC;AAAnB,AAAAV,AAAAS,AAAA,AAAyBE;AAAzB,AACE,AAAKC,AACH,AAAA,AAACtB,AAAMF,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACyB,AAAK,AAAA,AAAQzB,AAAS,AAAA,AAAeA,AAAWsB,AAAmBC;;AAC7E,AAAA,AAACrB,AAAMsB,AAAqB,AAAA,AAAG,AAAA,AAAexB;;AAGjD,AAAA,AAAC0B,AAEA,AAAAC,AAAkBhC;AAAlB,AAAA,AAAAiC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AAAa5B;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACS,AAAA,AAAA,AAACE,AAAMF,AAIiB,AAAA6B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;AALlC,AAAA,AAAA;;AAQD,AAAA,AAACpC,AAEA,AAAAqC,AAAK/B;AAAL,AAAA,AAAAgC,AAAAD;AAAA,AAAAhC,AAAAiC,AAAA,AAAA,AAASrC;AAAT,AAAAI,AAAAiC,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAC/B,AAAMF,AAAYiC","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","todo-fechapter.db/default-db","p__41811","vec__41812","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","active-panel","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__41815","vec__41816","todo-id","p__41819","vec__41820","map__41823","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","id","completed","cljs.core/vec","cljs.core.map.cljs$core$IFn$_invoke$arity$2","todo","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__41825","vec__41826","map__41829","title","description","todo-fechapter.events/new-db","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__41831","map__41832","G__41834","ajax.core/json-response-format","p__41835","vec__41836","result"],"sourcesContent":["(ns todo-fechapter.events\n  (:require\n   [re-frame.core :as re-frame]\n   [todo-fechapter.db :as db]\n   [ajax.core :as ajax]))\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n(re-frame/reg-event-db\n ::set-active-panel\n (fn [db [_ active-panel]]\n   (assoc db :active-panel active-panel)))\n\n(re-frame/reg-event-db\n ::current-todo-id\n (fn [db [_ todo-id]]\n   (assoc db :current-todo-id todo-id)))\n\n(re-frame/reg-event-db\n ::toggle-complete\n (fn [db [_ {:keys [id completed]}]]\n   (assoc db\n          :todos\n          (vec (map\n                (fn [todo]\n                  (if (= (int id)\n                         (int (:id todo)))\n                    (assoc todo :completed completed)\n                    todo))\n                (:todos db))))))\n\n(re-frame/reg-event-db\n ::new-todo\n (fn [db [_ {:keys [title description]}]]\n   (def new-db\n     (assoc db\n            :todos\n            (conj (:todos db) {:id (:next-todo-id db) :title title :description description :completed false})))\n   (assoc new-db :next-todo-id (+ (:next-todo-id db) 1))))\n\n\n(re-frame/reg-event-fx                             ;; note the trailing -fx\n ::get-weather                     ;; usage:  (dispatch [:handler-with-http])\n (fn [{:keys [db]} _]                    ;; the first param will be \"world\"\n   {:db   (assoc db :show-twirly true)   ;; causes the twirly-waiting-dialog to show??\n    :http-xhrio {:method          :get\n                 :uri             \"https://api.openweathermap.org/data/2.5/weather?q=Ljubljana&appid=bae59abd29656ca9e830d09f04c2cc26&units=metric\"\n                 :timeout         8000                                           ;; optional see API docs\n                 :response-format (ajax/json-response-format {:keywords? true})  ;; IMPORTANT!: You must provide this.\n                 :on-success      [::got-weather]}}))\n\n(re-frame/reg-event-db\n ::got-weather\n (fn [db [_ result]]\n   (assoc db :weather result)))"]}